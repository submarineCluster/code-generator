package {{.Name.Snake}}

import (
	"strconv"

	"git.code.oa.com/leoshli/code-generator/enum"
	"git.code.oa.com/leoshli/code-generator/params"
	"git.code.oa.com/leoshli/code-generator/utils"
	"git.code.oa.com/trpc-go/trpc-go/log"
	"github.com/gin-gonic/gin"
	"github.com/pkg/errors"
)

// Get{{.Name.ExportedCamel}} ...
func Get{{.Name.ExportedCamel}}(ctx *gin.Context) {
	req := &params.Get{{.Name.ExportedCamel}}Req{}
	id, err := strconv.ParseInt(ctx.Query("id"), 10, 64)
	if err != nil {
		log.InfoContextf(ctx, "parseInt fail:%v", err)
		utils.ResponseError(ctx, enum.CODE_PARAMS_JSON_PARSE_ERROR, err.Error())
		return
	}
	req.ID = id

	err = validateGet(req)
	if err != nil {
		log.InfoContextf(ctx, "validateGet fail:%v", err)
		utils.ResponseError(ctx, enum.CODE_PARAMS_JSON_PARSE_ERROR, err.Error())
		return
	}

	{{.Name.UnexportedCamel}}, err := server.Get(ctx, req)
	if err != nil {
		log.InfoContextf(ctx, "service Get fail:%v", err)
		utils.ResponseError(ctx, enum.CODE_DB_ERROR, err.Error())
		return
	}
	utils.ResponseSuccess(ctx, {{.Name.UnexportedCamel}})
	return
}

func validateGet(req *params.Get{{.Name.ExportedCamel}}Req) error {
	if req == nil || req.ID == 0 {
		return errors.Errorf("required id")
	}
	return nil
}
