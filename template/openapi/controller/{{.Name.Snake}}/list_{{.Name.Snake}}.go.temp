package {{.Name.Snake}}

import (
	"strconv"

	"{{.ModuleName}}/enum"
	"{{.ModuleName}}/params"
	"{{.ModuleName}}/service/{{.Name.Snake}}"
	"{{.ModuleName}}/utils"
	"git.code.oa.com/trpc-go/trpc-go/log"
	"github.com/gin-gonic/gin"
)

// List{{.Name.ExportedCamel}} ...
func List{{.Name.ExportedCamel}}(ctx *gin.Context) {
	req := &params.List{{.Name.ExportedCamel}}Req{}
	getListMeta(ctx, req)

	req.Where = make(map[string]interface{})
	for key := range {{.Name.Snake}}.FieldMapping {
		if len(ctx.Query(key)) > 0 {
			req.Where[key] = ctx.Query(key)
		}
	}

	err := validateList(req)
	if err != nil {
		log.InfoContextf(ctx, "validateList fail:%v", err)
		utils.ResponseError(ctx, enum.CodeParamsJSONParseError, err.Error())
		return
	}

	{{.Name.UnexportedCamel}}List, err := server.List(ctx, req)
	if err != nil {
		log.InfoContextf(ctx, "service List fail:%v", err)
		utils.ResponseError(ctx, enum.CodeDBError, err.Error())
		return
	}

	result := &params.List{{.Name.ExportedCamel}}Resp{
		ListMeta: params.ListMeta{
			Offset: req.Offset,
			Limit:  req.Limit,
		},
		Total:   int64(len({{.Name.UnexportedCamel}}List)),
		{{.Name.ExportedCamel}}List: {{.Name.UnexportedCamel}}List,
	}
	utils.ResponseSuccess(ctx, result)
	return
}

func validateList(req *params.List{{.Name.ExportedCamel}}Req) error {
	return nil
}

func getListMeta(ctx *gin.Context, req *params.List{{.Name.ExportedCamel}}Req) {
	limit, err := strconv.ParseInt(ctx.Query("limit"), 10, 64)
	if err == nil {
		if limit > 0 {
			req.Limit = limit
		}
	}

	offset, err := strconv.ParseInt(ctx.Query("offset"), 10, 64)
	if err == nil {
		if offset > 0 {
			req.Offset = offset
		}
	}
}
