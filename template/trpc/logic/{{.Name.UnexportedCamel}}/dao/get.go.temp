// Package dao generate by code-generator
package dao

import (
	"context"

	"git.code.oa.com/tencent_abtest/go-common/code-components/model/meta"
	"git.code.oa.com/tencent_abtest/go-common/code-components/model/option"
	"{{.ModuleName}}/entity/model"
    "{{.ModuleName}}/repo/conf"
    "git.code.oa.com/trpc-go/trpc-go/log"
)

//Get ...
func (s *Store) Get(ctx context.Context, id meta.ID, option *option.GetOption) (*model.{{.Name.ExportedCamel}}, error) {

	{{.Name.UnexportedCamel}} := &model.{{.Name.ExportedCamel}}{}

	// Get cache
	{{if .Ctrl.CacheEnable}}
    if content, cacheErr := inst.RedisClient.Get(ctx, conf.GetCacheKey(model.ObjectKind{{.Name.ExportedCamel}}, id)).Result(); cacheErr == nil {
        metrics.IncrCounter(conf.GenMetricsKey(model.ObjectKind{{.Name.ExportedCamel}}, conf.MetricsSceneHit), 1)
        err := json.Unmarshal([]byte(content), {{.Name.UnexportedCamel}})
        if err == nil {
            return {{.Name.UnexportedCamel}}, nil
        }
    }
    metrics.IncrCounter(conf.GenMetricsKey(model.ObjectKind{{.Name.ExportedCamel}}, conf.MetricsSceneMiss), 1)
    {{end}}

	err := s.Dao.First({{.Name.UnexportedCamel}}, id).Error
	if err != nil {
		return nil, err
	}

	// set cache
	{{if .Ctrl.CacheEnable}}
    cacheErr := inst.RedisClient.Set(ctx, conf.GetCacheKey(model.ObjectKind{{.Name.ExportedCamel}}, {{.Name.UnexportedCamel}}.ID), {{.Name.UnexportedCamel}}, conf.Expiration).Err()
    if cacheErr != nil { // just print
        log.Errorf("[key=%v]redis set fail:%v", conf.GetCacheKey(model.ObjectKind{{.Name.ExportedCamel}}, {{.Name.UnexportedCamel}}.ID), cacheErr)
    }
    {{end}}
	return {{.Name.UnexportedCamel}}, nil
}
