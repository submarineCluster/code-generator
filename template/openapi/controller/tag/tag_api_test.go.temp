package {{.Name.Snake}}

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"testing"
	"time"

	"{{.ModuleName}}/params"
)

func Test{{.Name.ExportedCamel}}API(t *testing.T) {

	apiHost := "http://127.0.0.1:8000"
	client := http.Client{
		Transport:     nil,
		CheckRedirect: nil,
		Jar:           nil,
		Timeout:       2 * time.Second,
	}
	headerHandler := func(req *http.Request) {
		req.Header.Set("X-Tab-Polaris-ServerName", "trpc.TAB.open_api_server.HelloTab")
		req.Header.Set("X-Tab-Route-Key", "eyJlbnYiOiI3NjEzMWNlNCJ9")
		req.Header.Set("appCode", "sougou")
		req.Header.Set("apiBusinessCode", "sougou")
		req.Header.Set("romaAPIToken", "f8f491836d7e10f0879c2ca2e59155f83cce081fc913909288d68062164dc6f74383ba51043cfddd625db36b289e7039b51f0aa7a1ebcab061b498f4b37f52242384765e376718f08b31bef548b01a82")
	}
	t.Run("Create", func(t *testing.T) {
		{{.Name.UnexportedCamel}} := &params.{{.Name.ExportedCamel}}{
			ID:                0,
			Name:              "unit_test",
			ValueType:         params.ValueTypeNumber,
			OperateType:       params.OperateTypeGte,
			PID:               0,
			BusinessProfileID: "95",
			Status:            0,
			CreateTime:        "",
			BusinessID:        0,
			Comment:           "",
		}
		create{{.Name.ExportedCamel}}Req := params.Create{{.Name.ExportedCamel}}Req{ {{.Name.ExportedCamel}}: {{.Name.UnexportedCamel}} }
		body, err := json.Marshal(create{{.Name.ExportedCamel}}Req)
		if err != nil {
			t.Fatalf("json Marshal fail:%v", err)
		}

		req, err := http.NewRequest(http.MethodPost, apiHost+"/tab/{{.Name.UnexportedCamel}}/create?business_code=1051", bytes.NewBuffer(body))
		if err != nil {
			t.Fatalf("NewRequest fail:%v", err)
		}
		headerHandler(req)

		resp, err := client.Do(req)
		if err != nil {
			t.Fatalf("client Do:%v", err)
		}
		if resp.StatusCode != http.StatusOK {
			t.Fatalf("client Do fail:[%v: %v]", resp.StatusCode, resp.Status)
		}
		defer resp.Body.Close()
		body, err = ioutil.ReadAll(resp.Body)
		if err != nil {
			t.Fatalf("ioutil ReadAll fail:%v", err)
		}
		t.Logf("%s", body)
	})

	t.Run("Get", func(t *testing.T) {
		req, err := http.NewRequest(http.MethodGet, apiHost+"/tab/{{.Name.UnexportedCamel}}/get?id=47&business_code=1051", nil)
		if err != nil {
			t.Fatalf("NewRequest fail:%v", err)
		}
		headerHandler(req)

		resp, err := client.Do(req)
		if err != nil {
			t.Fatalf("client Do:%v", err)
		}
		if resp.StatusCode != http.StatusOK {
			t.Fatalf("client Do fail:[%v: %v]", resp.StatusCode, resp.Status)
		}
		defer resp.Body.Close()
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			t.Fatalf("ioutil ReadAll fail:%v", err)
		}
		t.Logf("%s", body)
	})

	t.Run("List", func(t *testing.T) {

		req, err := http.NewRequest(http.MethodGet, apiHost+"/tab/{{.Name.UnexportedCamel}}/list?business_code=1051", nil)
		if err != nil {
			t.Fatalf("NewRequest fail:%v", err)
		}
		headerHandler(req)

		resp, err := client.Do(req)
		if err != nil {
			t.Fatalf("client Do:%v", err)
		}
		if resp.StatusCode != http.StatusOK {
			t.Fatalf("client Do fail:[%v: %v]", resp.StatusCode, resp.Status)
		}
		defer resp.Body.Close()
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			t.Fatalf("ioutil ReadAll fail:%v", err)
		}
		t.Logf("%s", body)
	})

	t.Run("Update", func(t *testing.T) {
		{{.Name.UnexportedCamel}} := &params.{{.Name.ExportedCamel}}{
			ID:                47,
			Name:              "城市",
			ValueType:         params.ValueTypeString,
			OperateType:       params.OperateTypeLte,
			PID:               0,
			BusinessProfileID: `["100"]`,
			Status:            1,
			CreateTime:        time.Now().Format("2006-01-02 15:04:05"),
			BusinessID:        82,
			Comment:           "城市下发",
		}
		update{{.Name.ExportedCamel}}Req := params.Update{{.Name.ExportedCamel}}Req{ {{.Name.ExportedCamel}}: {{.Name.UnexportedCamel}} }
		body, err := json.Marshal(update{{.Name.ExportedCamel}}Req)
		if err != nil {
			t.Fatalf("json Marshal fail:%v", err)
		}

		req, err := http.NewRequest(http.MethodPut, apiHost+"/tab/{{.Name.UnexportedCamel}}/update?business_code=1051", bytes.NewBuffer(body))
		if err != nil {
			t.Fatalf("NewRequest fail:%v", err)
		}
		headerHandler(req)

		resp, err := client.Do(req)
		if err != nil {
			t.Fatalf("client Do:%v", err)
		}
		if resp.StatusCode != http.StatusOK {
			t.Fatalf("client Do fail:[%v: %v]", resp.StatusCode, resp.Status)
		}
		defer resp.Body.Close()
		body, err = ioutil.ReadAll(resp.Body)
		if err != nil {
			t.Fatalf("ioutil ReadAll fail:%v", err)
		}
		t.Logf("%s", body)
	})
}
