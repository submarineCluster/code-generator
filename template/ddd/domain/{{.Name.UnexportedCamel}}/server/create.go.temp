// Package server generate by code-generator
package server

import (
	"context"

	"git.code.oa.com/tencent_abtest/go-common/eventqueue"
	eventqueue_model "git.code.oa.com/tencent_abtest/go-common/eventqueue/model"
	"{{.ModulePath}}/domain/model"
	"{{.ModulePath}}/{{.Name.UnexportedCamel}}/traffic"

	"github.com/pkg/errors"

	pb "git.code.oa.com/trpcprotocol/tab/{{.Ctrl.ServerName}}"
)

//Create ...
func (s *{{.Name.ExportedCamel}}Server) Create(ctx context.Context, {{.Name.UnexportedCamel}} *pb.{{.Name.ExportedCamel}}) (*pb.{{.Name.ExportedCamel}}, error) {

	//validate {{.Name.UnexportedCamel}}
	err := validateCreate({{.Name.UnexportedCamel}})
	if err != nil {
		return nil, err
	}
	{{.Name.UnexportedCamel}}Model := model.Transform{{.Name.ExportedCamel}}({{.Name.UnexportedCamel}})
	// store to db
	{{.Name.UnexportedCamel}}Model, err = s.S.Create(ctx, {{.Name.UnexportedCamel}}Model)
	if err != nil {
		return nil, errors.Wrapf(err, "Create")
	}
	return {{.Name.UnexportedCamel}}, nil
}

func validateCreate({{.Name.UnexportedCamel}} *pb.{{.Name.ExportedCamel}}) error {

	if {{.Name.UnexportedCamel}}.Meta == nil {
		return errors.Errorf("required {{.Name.UnexportedCamel}} meta")
	}
	if len({{.Name.UnexportedCamel}}.Meta.Name) == 0 {
		return errors.Errorf("required {{.Name.UnexportedCamel}} name")
	}
	return nil
}
