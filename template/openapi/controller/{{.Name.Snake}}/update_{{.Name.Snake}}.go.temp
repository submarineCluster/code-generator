package {{.Name.Snake}}

import (
	"{{.ModuleName}}/enum"
	"{{.ModuleName}}/params"
	"{{.ModuleName}}/utils"
	"git.code.oa.com/trpc-go/trpc-go/log"
	"github.com/gin-gonic/gin"
	"github.com/gin-gonic/gin/binding"
	"github.com/pkg/errors"
)

// Update{{.Name.ExportedCamel}} ...
func Update{{.Name.ExportedCamel}}(ctx *gin.Context) {
	update{{.Name.ExportedCamel}}Req := &params.Update{{.Name.ExportedCamel}}Req{}
	err := ctx.ShouldBindBodyWith(update{{.Name.ExportedCamel}}Req, binding.JSON)
	if err != nil {
		log.InfoContextf(ctx, "ShouldBindBodyWith fail:%v", err)
		utils.ResponseError(ctx, enum.CODE_PARAMS_JSON_PARSE_ERROR, err.Error())
		return
	}

	err = validateUpdate(update{{.Name.ExportedCamel}}Req)
	if err != nil {
		log.InfoContextf(ctx, "validateUpdate fail:%v", err)
		utils.ResponseError(ctx, enum.CODE_PARAMS_JSON_PARSE_ERROR, err.Error())
		return
	}

	{{.Name.UnexportedCamel}}, err := server.Update(ctx, update{{.Name.ExportedCamel}}Req.{{.Name.ExportedCamel}})
	if err != nil {
		log.InfoContextf(ctx, "service Update fail:%v", err)
		utils.ResponseError(ctx, enum.CODE_PARAMS_JSON_PARSE_ERROR, err.Error())
		return
	}
	utils.ResponseSuccess(ctx, {{.Name.UnexportedCamel}})
	return
}

func validateUpdate(update{{.Name.ExportedCamel}}Req *params.Update{{.Name.ExportedCamel}}Req) error {
	if update{{.Name.ExportedCamel}}Req == nil || update{{.Name.ExportedCamel}}Req.{{.Name.ExportedCamel}} == nil {
		return errors.Errorf("required update{{.Name.ExportedCamel}}Req")
	}

	if update{{.Name.ExportedCamel}}Req.{{.Name.ExportedCamel}}.ID <= 0 {
		return errors.Errorf("required ID")
	}
	return nil
}
