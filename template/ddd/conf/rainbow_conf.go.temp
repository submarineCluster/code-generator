package conf

import (
	"io/ioutil"
	"os"
	"sync"

	"git.code.oa.com/trpc-go/trpc-go"
	"github.com/pkg/errors"

	"git.code.oa.com/rainbow/golang-sdk/confapi"
	"git.code.oa.com/rainbow/golang-sdk/config"
	"git.code.oa.com/rainbow/golang-sdk/types"
	"git.code.oa.com/rainbow/golang-sdk/watch"
	"git.code.oa.com/trpc-go/trpc-go/log"
	"gopkg.in/yaml.v2"
)

// ServerConfig 服务器配置
type ServerConfig struct {
	// Database db 配置
	Database struct {
		User     string `yaml:"user"`
		Password string `yaml:"password"`
		Host     string `yaml:"host"`
		Port     string `yaml:"port"`
		Name     string `yaml:"name"`
	} `yaml:"database"`

	// RedisConfig redis 的连接配置
	RedisConfig struct {
		Host         string `yaml:"host"`
		Password     string `yaml:"password"`
		Port         string `yaml:"port"`
		Database     int    `yaml:"database"`
		PoolSize     int    `yaml:"poolSize"`
		MinIdleConns int    `yaml:"minIdleConns"`
	} `yaml:"redis"`
}

var (
	once         sync.Once
	serverConfig *ServerConfig
	confAPI      *confapi.ConfAPI
	rwMutex      sync.RWMutex
)

const (
	serverConfName   = "/*替换成自己的配置文件 推荐serverConfig*/"
	rainbowURL       = "http://api.rainbow.oa.com:8080"       // 七彩石的host
	rainbowAppID     = "55a109c7-4a17-4658-84f4-e29812dfbe5b" // 七彩石的项目ID
	rainbowGroupName = "{{.Ctrl.ServerName}}"                 // 七彩石的配置空间名，默认用serverName
)

//Init ...
func Init() error {
	var err error
	once.Do(func() {
		rwMutex.Lock()
		defer rwMutex.Unlock()
		if os.Getenv("SUMERU_SERVER") == "" {
			var yamlFile []byte
			yamlFile, err = ioutil.ReadFile(serverConfName)
			if err != nil {
				return
			}
			err = yaml.Unmarshal(yamlFile, &serverConfig)
			return
		}
		confAPI, err = confapi.New(
			types.ConnectStr(rainbowURL),
			types.IsUsingLocalCache(true),
			types.IsUsingFileCache(true),
			types.AppID(rainbowAppID),
			types.Groups(rainbowGroupName),
			types.EnvName(getRainbowEnvName()),
		)
		if err != nil {
			return
		}
		context := ""
		context, err = confAPI.Get(serverConfName)
		if err != nil {
			return
		}

		err = yaml.Unmarshal([]byte(context), &serverConfig)
		if err != nil {
			return
		}
		// watch
		err = watchConfig()
		return
	})
	return err
}

//Config ...
func Config() *ServerConfig {
	rwMutex.RLock()
	defer rwMutex.RUnlock()
	return serverConfig
}

func getRainbowEnvName() string {
	switch trpc.GlobalConfig().Global.EnvName {
	case "test":
		return "test"
	case "pre":
		return "pre"
	case "formal":
		return "Default" // 正式
	default:
		return "test"
	}
}

// watchCallBack 监视远程配置的修改并同步
func watchCallBack(oldVal watch.Result, newVal []*config.KeyValueItem) error {
	log.Infof("rainbow conf watchCallBack:%+v", newVal)

	rwMutex.Lock()
	defer rwMutex.Unlock()
	for _, item := range newVal {
		for _, kv := range item.KeyValues {
			if kv.Key == serverConfName {
				err := yaml.Unmarshal([]byte(kv.Value), &serverConfig)
				if err != nil {
					return errors.Wrapf(err, "getConfig")
				}
			}
		}
	}

	return nil
}

func watchConfig() error {

	var watchConfig = watch.Watcher{
		Key: serverConfName,
		GetOptions: types.GetOptions{
			AppID:   rainbowAppID,
			Group:   rainbowGroupName,
			EnvName: getRainbowEnvName(),
		},
		CB: watchCallBack,
	}
	return confAPI.AddWatcher(watchConfig)
}
