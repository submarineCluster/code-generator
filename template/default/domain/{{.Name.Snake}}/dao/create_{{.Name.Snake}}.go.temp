/*Package dao generator by code-generator JUST EDIT
*/
package dao

import (
	"git.yy.com/ihago/ylog"
	"git.yy.com/ihago/ylog/zap"
	{{if .Ctrl.DaoMetricsFlag}}"git.yy.com/ihago/ymetrics"{{- end}}
	"github.com/ilibs/gosql/v2"
	"github.com/pkg/errors"
	"{{.ModuleName}}/domain/api/{{.Name.Snake}}/model"
	{{if .Ctrl.DaoMetricsFlag}}"time"{{- end}}
)

// Create ...
func (d *Dao) Create(ctx context.Context, {{.Name.UnexportedCamel}} *model.{{.Name.ExportedCamel}}) (*model.{{.Name.ExportedCamel}}, error) {

	var err error
	{{if .Ctrl.DaoMetricsFlag}}
	defer func(startTime int64) {
		code := 0 // success
		if err != nil {
			code = 1 // failure
		}
		metricsError := ymetrics.SendMetrics("Dao/Create{{.Name.ExportedCamel}}", code, startTime, func(code int) bool {
			return code == 0
		})
		if metricsError != nil {
			ylog.Error("SendMetrics fail", zap.Error(metricsError))
		}
	}(time.Now().UnixNano())
	{{- end}}

	_, err = gosql.Model({{.Name.UnexportedCamel}}).Create()
	if err != nil {
		return nil, errors.Wrapf(err, "create Model fail")
	}

	return {{.Name.UnexportedCamel}}, nil
}
